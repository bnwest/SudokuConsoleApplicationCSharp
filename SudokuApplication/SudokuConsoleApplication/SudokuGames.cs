using System;


namespace Sudoko
{
    class SudokuGames
    {
        static public string getGame()
        {
            return
    // hidden single in row, column, grid; naked pair in row;
    // type 1 and 2 locked candidate in row and column
    // "563700000002000947040100000030050209020000080409010050000004010254000600000006495"
    // aka
    /*
           "5637....." +
           "..2...947" +
           ".4.1....." +
           ".3..5.2.9" +
           ".2.....8." +
           "4.9.1..5." +
           ".....4.1." +
           "254...6.." +
           ".....6495";
     */

    // http://www.palmsudoku.com tricky
    //  "700000093800003020030500806620008001000109000100600084306001050070400008910000007"
    //  "100000000059102000007800029005300604000060000304008500510004800000201950000000007"
    //  "563700000002000947040100000030050209020000080409010050000004010254000600000006495"
    //  "000730085000000006081040230128090070000000000070080642014070850500000000830051000"
    //  "013000060020800001900600700302008006060903020500100803001006009700004080080000610" // 6600
    //  "080403009000000137503700000070000002009806700800000060000009403495000000200507090" // 7500
    //  "500000080700500060060010700309700000200301005000005403002050010030009002090000006" // 7800
    // did not solve - x-wing
    //  "208053700900000000000406008504810200100000007009024105600208000000000009007540302" // 9150
    //  "106000002000080090398005000580302000000090000000408023000200756070040000200000804" // 6850
    //  "019058000503201000700000005040900008000060000800004030900000006000406209000390750" // 6900
    //  "000070520083560000000002080002000004050603010900000200010700000000086740064010000" // 8150
    // found naked pair in row, column and grid
    //  "000085400050003027000000008402007050608000704070300206500000000940500060001920000" // 6750
    //  "502714008060000000700000300001070000090802070000050400007000009000000060400193807" // 8750
    //  "009300000000080401710400060030000002008209100100000030080001075401050000000003600" // 7850

    // http://mypuzzle.org/sudoku/ moderate
    //  "300040598029100000000000004000002903000090000207400000700000000000005870856070002"
    // hidden triple (3,6,7) at cell(2, 7..9)
    // "300040598029100000000000004000002903000090000207400000700000000000005870856070002"
    //  "100000058250100000079000400000092005500678034000051009014000600860900000900000081"
    // "100000058250100000079000400000092005500678034000051009014000600860900000900000081"

    // moderate: naked triple, simple coloring
    // naked triple ( 1 2 5 ) for row 6
    //  "007065009160000070400080006000200040600000003090003000800040007020000068900870300"
    // naked pair in column: (2 6) at cell(1,1) and cell (8,1); triple at cell(7,4..6)
    //  "050170304300002000409000000160300008000000000800006032000000405000900007705021080"
    // naked pair in column: (3 5) at cell(5,3) and cell(8,3)
    // "001007309300020400000008060107080604680204010904070508000006040700010800006005102"

    // http://mypuzzle.org/sudoku/ hard
    //  "045200007100059200000000000400600030700000008090004006000000000004830001500001960"
    // x-wing
    //  "010346090300000006000105000120000047800407005004000900000020000700968003086030720"

    // Simple Sudoku
    // http://www.angusj.com/sudoku/
    // hard
    // 2 x naked triples (grid,row)
    // hidden pair ( 6 8 ) at cell(6,5) and cell(6,8), row 6 (at start)
    // hidden triple ( 3 4 7 ) for row 8 (at start)
    // "5..8.......8..91...69..4...8.61....47...9...39....75.2...9..43...26..9.......3..7"
    // "........547.......85..42...64.58......79.41......73.96...85..34.......673........"
    // found hidden triple ( 4 5 8 ) for column 3 (at start)
    // "46...1.....2.96....3.....68.......37...6.7...51.......84.....5....71.9.....3...24"
    // found hidden triple ( 4 7 8 ) for grid(1,1)
    // "1....89...5..9..32.9.7..6..83.9...2.....4...6.....53..5..1.94...6..5...84...8..1."
    // "...7..1...81..2..595...1..7.......73..3...8..54.......2..6...594..8..76...7..4..."
    // "73...46...94..28...2..........43.2.7.........3.2.78..........5...89..73...61...84"

    // hidden triples
    // "4....961...56...79.1.42.3...51.6.................1.83...7.83.6.53...67...692....3"
    "4....8.....753...8.9..6.41353....2.7.........7.6....81954.1..3.3...751.....9....5"

   // https://kjell.haxx.se/sudoku/ -- 26 is hard, 25 is harder, etc
   // 26
   // "4....5.83...........28...9.7.....469.6.41..2.85..6.3..9.......7..32.........9.8.5"
   // 25
   // ".9.....5....2.....16.....4.6.2...87...5..623.....9......69..1...287..3.5......4.6"
   // ".1.8....5.......23.......1.2...7349.....2.3........1..3......6..654.82.....15.8.4"
   // "3....918..8.......2....85.9..8.6...3...58.6...37...........4..85.1..7.3...9.....6"
   // ".58...3.1....5...7.3...8...61.57..2.5..1..9...2.8..4....1........9.8.........423."
   // ".4..2.1..1..9....6....8.7.2.9...36.5.2.....1...8..4...6....7.9..7.....8...91....7"
   // "..2.3.......8521..5.7....3........27.....4....9.61...3....7.3...8...5....43.9.68."
   // 24
   // ".8.6..53...49.....79....1....64...8...............87..8...71..5..3.9..6..2..8..9."
   // "......7.2...6.9.......1293.....37.145.....3..6.4.....9.8.4....6.7..81....4......."
   // "..1.2...5...863.2.....9..7..6.....4..9.....51.8.74...24......6.7..2........5...3."
   // "...8..5..3....1..4..9...71..582......9.1.76.3.1..........5..28.........79...43..."
   // "7.......9........5.6...2.....59.....4..2...6.836....2....1.34.6..9..7..11...46..."
   // "2...3.4.17.....9..8....5....54......1..8....5.....234741.7..58...3........2......"
   // "....3......8..1.2.2....9......5..9.6.2......4..738...2..2.7..3.936..5...4..1....."
   // 23
   // ".758....9...5.....19..42.7...6...31..8.2.5..7.......9...........5......8...731..."
   // "2..5...........79......46..9.1.3...24....6...657..8..3...9.......6...15..1.2....."
   // ".....19..3.7....268.........5.28469........1.2......8..9....5.1...83.....6.1....."
   // "...1........2...568.7.....9....128...3.56..........6..1.96...2......874..5....9.."
   // "9.....8.....876...5...4..........2.3.4........7.23.1...3...89422....3........9.5."
   // "...38.....3.....69....9....8.7....5.4...7.........284..24..6.....6...9.8.8..25..."
   // "..2.....7.36....5....25..8.5..682...2.....46........3.1.......8...916......32...."
   // ".1.....2.7.6.3...4...1..98...5...4.7......8.5..18.......7.5.....9...7...18.....7."
   // "...5..42757...96...2...3...8..6.2.............3.....7.6.....1..4.23.8.......27..."
   // "4......2..8.9.5.1.6..7...9...1..83....2....76.6...9......4..8........5...392....."
   // "5.....9....6..7453.....4.......5......8196..........6791...5.......82..4....1...5"
   // "..19..2.4.............5....1.5.......7.4..832..3...7.5.82....5....53.....9.2..6.."
   // 22
   // "...9...254.........1..4...6....816...69....875...2.....8.2..1.......4...7..5....."
   // ".......46.26....1..7..26....92..87......1...5...4.......1....2......96.35....7..."
   // "5....74.............7..8...9..61.7.........38..2....6.....4.6.7.4...1...138..2..."
   // "..2.........6793....6...1..7...9...5...8...46.......32...1....3...2.4...8..9..5.."
   // "7....1...3.....7........59..5.......9..813..7.....2......95..7..24.....5....4.83."
   // ".261..5.4..42.9.........31.6...3......74....9...............1..31...........126.7"
   // "4...........8..2.93.1....5.....4..1.5.....3..69.52.....5.79...8........72...3...."
   // 20
   // ".1....6...4...6..1.....5...8..9....3..5........6.13..7......9...72.4..........58."
   // 18
   // "..5.4....................12.4.3.2.....61.......9...8......7.5.81........3...64..."
   // 17 L1
   // "....6....5.7...........9.2..4...6...........5......7.8.93....1........4....85.2.."
   // "9.6..7.....7...3.8........5.............96....3...1..4...8......5.4.....1......6."
   // "..1.....5.....5..7..9.8......3...8.....4........7.29..5............1..6.72......."
   // "......3........59..6.84.....2...7..43..9........5.........1.8......6...75........"
   // "....4..9..........8.3.........1.8....49....2.7....3......5..3.7........8..2.1...."
   // "..1.........9....745...3..........1.....8..4..68.7.....2......8...1........4.5..."
   // 17 L2
   // "5....1...9.......8....6.7.........19...........3.7......68.......7...3.....9.5..2"
   // "........369.1.....5.........17.....8....6..1...3..5.........69.......7....28....."
   // "8.......5...14.....3.6..........9....1.....6...2..8......3.......5..2..9.6.....8."
   // "..2.4...8....6........9......81...........46........5.69.3.....5......9....2....3"
   // "53...............1......829.89.....5...7...6..............18...6...9....4......7."
   // "..............9..5.83.7....5....2..........7.......83.9...64.......3....2..5....9"
   // ".........8..9.3.....7.....1....4.5.......76..3.........46.7........2..83........9"
   // 17 L3
   // "...2...4........6..39.1....4..6.......2...9.....8..1......93.......5....2......7."
   // "....42........7...3.5.....9..9.............2...68..1...2.......4......7....5.1..6"
   // "......92.6...38...4........8.......5.1..........2......2..8.........4..3.97.5...."
   // ".........4....9..........65...56....9.....4.8....1....2.1...3.......37.4..5......"
   // failed to solve - Simple Sudoku could not solve
   // ".....8..1.6..3......2....7..........1.7.....8...69.....4....3...9....6.4.....1..."
   // ".53.6..........7..2.......4.......651..2.9...........89....12.......4.......5...."
   // 17 L4 - I Like
   // "3..2..........8.6.......49....13...2.96..........5......4..6...5.......1.......8."
   // "..............248.7..6.......4....1..58....9.........3......7..3.......6..2.84..."
   // ".9...8..........2.1...34.........4....25......67...8....5.........2...6.3...4...."
   // ".....8.......7.9.62.........79...4.......1........23....7.4.........3.1...6....2."
   // failed to solve - exclude based on multiple colors
   // "..21..6........95..3..7...............1.....7...6.5...59...........3...86.4......"
   // "....29.8...3..........8.....8..........7..3.1...1....51.53...............9..4..2."
   // "....7....9.......1..5.8....12.4............7........83.......3....1.2..9..89....."
   // ".9..........3........2..13.6.2.......7....9.4......7....8......2.3....6.....94..."
   // failed to solve - exclude based on colors
   // "....8....47.....1.....362....3..2......7...4.........9.4.......91............36.."
   // "....1..2.........8.63......5...2...9..4...3.....9.....4...........3.76..1......5."
   // "5.....7.3...1.4......8.....3....2....8.....9........1..9........18.....6....75..."

   // good one -- real grinder
   // "5..7.6.....8....43.......1...1.4................6.27...2....9.....83....7........"

   // failed to solve - naked quad ( 2 3 5 8 ) for grid(2,3), exclude based on colors)
   // ".....7.....2...6......3......96..........5........4.1747....9..1...........85.3.."
   // "4......9.82..1.......7..6.........81.....3......6.9...1.5..........4...8..9......"
   // ".....7....4......3...8.2.........7...6..5....2.....8..8....9..6.......457.3......"
   // "...46.8....9..........8.3.......1...68............7.2...7..9..1.4..3............7"
   // failed to solve - "exclude based on multiple colors"
   // "........4..6.....5.1...2.9.5.............13.....9..8..8..45......3...12.........."
   // "..9...3.6.........1..57.....2..5.....3..........14..7..6.9.3.........45.........."
   // "3.7..5.....5.1..........9...9...8......6...3....2....7.6....8......7....4..9....."
   // ".....5....4......36.......7.9....51.4..73........6.....51...2.....62............."
   // "3.2........7....9.......1.........7..6..4.........2.35...9.7........3..6.1....4.."
   // "...9.5...2.........1.8.....7......8.......19.3...2.....9........8.5....4....3...2"
   // "...1...24....4...7.6........1....8.....5....9....2.........15.......86..7.4......"
   // ".....59..1.6......4.....5...38.........6........417....9...2...........4...7....1"
   // ".....9.......1..2.5..3...........3.4.26.8.....1...........2..6.39.4............1."
   // good one
   // ".2...........4..65.7......8.3............17.29.6...........2.....4....9....8.3..."
   // failed to solve - xy-wing
   // "......1.6...8....3..19.........3...4..9......2.87......3..6...........9......5.8."
   // failed to solve x-wing
   // "1..46.......8......2....7............97..2..........414......6......927...3......"
   // "2.69.............8.......5.....85.7.....1....7.....9...........58..3..1....6..2.."
   // "..8.5...........2..4.....317.9..8...5...........3....4.1.2..........95........9.."
   // 17 l5
   // failed to solve - naked quad ( 1 3 4 7 ) for column 3 at start, Simple Sudoku fails to solve
   // "...7.....8.6.....1...29........3..2........79..5..4...........592........8...1..."
   // "1....6.5........3.....2..9.6.....7.....94........35........8..2..3.......94......"
   // "...8..2...39..4.........6.....29....3....7...14..............4.....1..3.6..5....."
   // ".....9...1.5..7.......48..6...5...4........8.2..3......89............1.3..4......"
   // "...2.1..9.....5...3.........51..9.........3........4.....8...214.36.....7........"
   // "5...............6....94.7....8........97..........1.3.16...5.........8.73.....4.."


   // http://www.angusj.com/sudoku/ -- Advanced Puzzle Pack 2 -- puzzle001.ss to puzzle046.ss 
   // hidden pair ( 1 6 ) at cell(2,4) and cell(3,4), column 4
   // "2...578.37.....4...43.......7.54....32.876.49....13.5.......61...1.....44.736...2"
   // "7..42..6..435..2...1..3.59......4321....9....1643......71.6..3...9..361..2..41..9"
   // ".8..7..9...5..2...2.....4.8..7..61.5..2.3.6..1.82..9..3.1.....9...4..7...2..9..3."
   // "6.94..1...87.1......38.7....16.2...8..5...6..8...6.97....3.68......7.43...1..57.6"
   // "...9.61....3......2.9.5..48.5..1.3.7..8...4..1.7.3..2.73..2.5.4......7....43.5..."
   // "54..219..........5..695..1298...62.............27...6979..385..6..........856..71"
   // ".....7.21...6.8.......5..8693.7..4....6.4.5....4..9.6367..3.......1.6...14.9....."
   // "...8.6.4.5..7..31..43...8....5.....19..2.1..66.....9....2...63..69..2..8.5.1.7..."
   // "9.....3.1...21......8..6....659.82...4.....6...94.318....6..5......85...5.7.....3"
   // "65..4328..2.8.65.........648...24......198......76...878.........54.9.3..3458..26"
   // ".98..4..6.7..6....6.29.....9....6.21...4.8...56.1....9.....74.2....1..5.2..5..68."
   // "...1.....8...652.....47...8359.27.6..4.....5..2.54.7939...16.....428...7.....4..."
   // "5...9..6....5..1.7..4..1.9...14.765...........381.57...4.3..5..1.7..4....2..7...4"
   // ".32.9...5.....48....763...46....9.8...3...4...2.5....39...673....64.....2...8.15."
   // "..6..3.214.....6...98.7....6.31.........3.........54.6....4.16...1.....224.7..5.."
   // ".65...19.8..1.53..3.......575..2.......548.......1..245.......3..34.6..9.42...68."
   // "2.39.54......4.573...3.......7.....69..583..74.....8.......9...875.3......94.73.5"
   // "...5......469.853..8..32...82...41...94.2.86...18...43...24..5..721.568......3..."
   // "..2.4...13.5.69...47.1........7..13...14.27...63..8........1.78...68.9.38...7.5.."
   // "38..2.19...7...528..5..9.........8.4...4.7...5.2.........3..4..631...2...28.6..75"
   // ".3..2...67.....4..2.1.76....231...6.....5.....9...735....28.6.5..6.....19...1..4."
   // "4....268.8....1..2..9..6...29..8.4....4...3....6.4..18...7..1..6..9....4.416....7"
   // "2....5.986..8792.....2..7..3.54...8.4.......3.7...85.2..1..4.....8712..652.9....7"
   // ".46.9....3....8.7...8....32.2.1..6..8...3...9..1..9.5.41....8...8.6....4....7.12."
   // "2..59..43...........8327....76.....45.3.1.2.68.....93....1746...........69..53..1"
   // "..9..8.4.8.....3.7.3.9.2...49..7.2...7.....8...2.1..34...1.5.2.3.5.....8.6.3..5.."
   // ".....5.16174..2...65......9.....8.3...2.4.8...6.3.....4......68...5..27121.8....."
   // "..4.....9.2.5.......6.91.4......2.6.64..1..87.9.8......3.64.7.......7.5.1.....8.."
   // "..794...1....32..6...1...7...5.2..6996.....5882..9.4...4...1...6..27....5...697.."
   // ".2.1...3.45..32....3.7.54..1...78.....5...7.....25...1..24.7.1....58..94.8...1.6."
   // "..651..9.4.3..8.6..89..64......65.....41398.....24......56..12..3.4..5.9.4..526.."
   // ".974.6............1...5..9.4..9.2.5.2.18.59.7.5.3.1..6.4..1...5............6.931."
   // "8...65.9....2...57.2.8.....2.....7.5.6.....8.3.4.....9.....3.2.74...8....8.94...1"
   // ".54.7...8.2.8.5....7....35.7...286.....9.7.....241...9.98....1....3.4.8.5...8.96."
   // "......5..2..6....798..154..6..1..9.5..9.2.1..7.8..4..2..657..498....2..1..4......"
   // ".2.6..7.5.......1.9..17..8.5..2....8.1.9.7.5.7....6..2.8..94..3.5.......2.9..1.6."
   // ".53...1.44.....97.1..9....8.4.1........742........5.3.6....1..7.87.....12.1...64."
   // "5...6..7.431.7.......1..2....7..65...8..1..6...29..1....4..7.......5.723.5..2...9"
   // ".57.2..86..........1..8.47....4...595...9...373...6....78.5..9..........19..3.82."
   // "..8...1....5..2.647....1...5...4..9..39...42..7..3...6...8....921.4..6....6...5.."
   // ".5192..........32..2...3..59.658...1.386.295.2...198.47..2...1..13..........3467."
   // "1....4..2..3.7..4..8..6..7....7....654.....218....2....1..3..6..6..1.4..4..6....9"
   // "......1...1.....49..9.27.655..38.7.6.........2.7.64..317.83.9..95.....8...2......"
   // "7.9.3.8.....2.....4....8.6525...4...3..672..4...3...8794.8....3.....3.....3.1.7.8"
   // "4..2..89..96.8.2.1.......54...42.....5.9.1.8.....65...17.......6.2.4.51..39..2..8"
   // ".......5..5.9..3..3..754..8..8.4.6..17..2..45..5.7.2..5..867..4..9..5.8..6......."
   ;
        }
    }
}
